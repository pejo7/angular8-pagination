{"version":3,"sources":["ng://ng-pagination/lib/ng-pagination.service.ts","ng://ng-pagination/lib/ng-pagination.component.ts","ng://ng-pagination/lib/ng-pagination.module.ts"],"names":["NgPaginationService","prototype","getPager","totalItems","currentPage","pageSize","maxPages","startPage","endPage","totalPages","Math","ceil","startIndex","endIndex","min","pages","Array","from","keys","map","i","Injectable","args","providedIn","NgPaginationComponent","pagination","this","pagedItems","EventEmitter","pager","showTotal","ngOnInit","setPage","page","allItems","length","emit","slice","Component","selector","template","Input","Output","NgPaginationModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"6UAAA,IAAAA,EAAA,WAOE,SAAAA,YACAA,EAAAC,UAAAC,SAAA,SAASC,EAAoBC,EAAyBC,EAAuBC,QAAhD,IAAAF,IAAAA,EAAA,QAAyB,IAAAC,IAAAA,EAAA,SAAuB,IAAAC,IAAAA,EAAA,OAWvEC,EAAmBC,EATnBC,EAAaC,KAAKC,KAAKR,EAAaE,GAGpCD,EAAc,EACdA,EAAc,EACPA,EAAcK,IACrBL,EAAcK,GAID,IAAbH,IACIG,GAAc,GAEdF,EAAY,EACZC,EAAUC,GAGNL,GAAe,GACfG,EAAY,EACZC,EAAU,GACHJ,EAAc,GAAKK,GAC1BF,EAAYE,EAAa,EACzBD,EAAUC,IAEVF,EAAYH,EAAc,EAC1BI,EAAUJ,EAAc,IAIjB,KAAbE,IACEG,GAAc,IAEdF,EAAY,EACZC,EAAUC,GAGNL,GAAe,GACfG,EAAY,EACZC,EAAU,IACHJ,EAAc,GAAKK,GAC1BF,EAAYE,EAAa,EACzBD,EAAUC,IAEVF,EAAYH,EAAc,EAC1BI,EAAUJ,EAAc,QAMhCQ,GAAcR,EAAc,GAAKC,EACjCQ,EAAWH,KAAKI,IAAIF,EAAaP,EAAW,EAAGF,EAAa,GAG5DY,EAAQC,MAAMC,KAAKD,MAAOR,EAAU,EAAKD,GAAWW,QAAQC,IAAG,SAACC,GAAK,OAAAb,EAAYa,IAGrF,MAAO,CACHjB,WAAYA,EACZC,YAAaA,EACbC,SAAUA,EACVI,WAAYA,EACZF,UAAWA,EACXC,QAASA,EACTI,WAAYA,EACZC,SAAUA,EACVE,MAAOA,wBA1EdM,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WAwFE,SAAAA,EAAoBC,GAAAC,KAAAD,WAAAA,EAHVC,KAAAC,WAAa,IAAIC,EAAAA,aAC3BF,KAAAG,MAAa,GAGXH,KAAKI,WAAY,EAerB,OAZEN,EAAAvB,UAAA8B,SAAA,WACEL,KAAKM,QAAQ,IAGfR,EAAAvB,UAAA+B,QAAA,SAAQC,GAENP,KAAKG,MAAQH,KAAKD,WAAWvB,SAASwB,KAAKQ,SAASC,OAAQF,EAAMP,KAAKrB,SAAUqB,KAAKpB,UAGtFoB,KAAKC,WAAWS,KAAKV,KAAKQ,SAASG,MAAMX,KAAKG,MAAMjB,WAAYc,KAAKG,MAAMhB,SAAW,yBAlGzFyB,EAAAA,UAAShB,KAAA,CAAC,CACTiB,SAAU,eACVC,SAAU,09BAuBR,i0BA3BKxC,uCAgFNyC,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,0BACAC,EAAAA,UAmBHlB,EAxGA,GCAA,IAAAmB,EAAA,WAIA,SAAAA,KAOkC,2BAPjCC,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,aAAc,CAACrB,GACfsB,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAACxB,OAEsBmB,EAXlC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgPaginationService {\n\n  constructor() { }\n  getPager(totalItems: number, currentPage: number = 1, pageSize: number = 10, maxPages: number = 5) {\n    // calculate total pages\n    let totalPages = Math.ceil(totalItems / pageSize);\n\n    // ensure current page isn't out of range\n    if (currentPage < 1) {\n        currentPage = 1;\n    } else if (currentPage > totalPages) {\n        currentPage = totalPages;\n    }\n\n    let startPage: number, endPage: number;\n    if (maxPages === 5) {\n        if (totalPages <= 5) {\n            // less than 5 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 5 total pages so calculate start and end pages\n            if (currentPage <= 3) {\n                startPage = 1;\n                endPage = 5;\n            } else if (currentPage + 1 >= totalPages) {\n                startPage = totalPages - 3;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 2;\n                endPage = currentPage + 2;\n            }\n        }\n\n    } if (maxPages === 10) {\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n    }\n\n    // calculate start and end item indexes\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    // create an array of pages to ng-repeat in the pager control\n    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\n\n    // return object with all pager properties required by the view\n    return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n    };\n}\n}\n","import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { NgPaginationService } from './ng-pagination.service';\n\n@Component({\n  selector: 'ngPagination',\n  template: `\n  <div class=\"container\">\n    <ul *ngIf=\"pager.pages && pager.pages.length\" class=\"pagination\">\n        <li [ngClass]=\"{disabled:pager.currentPage === 1}\">\n            <a (click)=\"setPage(1)\">First</a>\n        </li>\n        <li [ngClass]=\"{disabled:pager.currentPage === 1}\">\n            <a (click)=\"setPage(pager.currentPage - 1)\">&laquo;</a>\n        </li>\n        <li *ngFor=\"let page of pager.pages\" [ngClass]=\"{active:pager.currentPage === page}\">\n            <a (click)=\"setPage(page)\">{{page}}</a>\n        </li>\n        <li [ngClass]=\"{disabled:pager.currentPage === pager.totalPages}\">\n            <a (click)=\"setPage(pager.currentPage + 1)\">&raquo;</a>\n        </li>\n        <li [ngClass]=\"{disabled:pager.currentPage === pager.totalPages}\">\n            <a (click)=\"setPage(pager.totalPages)\">Last</a>\n        </li>\n    </ul>\n    <span *ngIf='showTotal'>{{pager.startIndex +1}} - {{pager.endIndex +1}} out of {{allItems.length}}</span>\n</div>\n`,\n  styles: [\n    `\n  .container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\nul {\n    padding-inline-start: 0;\n}\n\n.pagination li {\n    cursor: pointer;\n    user-select: none;\n    display: inline-block;\n    border-radius: 2px;\n    text-align: center;\n    vertical-align: top;\n    height: 30px;\n}\n\n.pagination li a {\n    color: #444;\n    display: inline-block;\n    font-size: 1.2rem;\n    padding: 0 10px;\n    line-height: 30px;\n}\n\n.pagination li.active a {\n    color: #fff;\n}\n\n.pagination li.active {\n    background-color: #ee6e73;\n}\n\n.pagination li.disabled a {\n    cursor: default;\n    color: #999;\n}\n\n.pagination li i {\n    font-size: 2rem;\n}\n\n.pagination li.pages ul li {\n    display: inline-block;\n    float: none;\n}\n`]\n})\nexport class NgPaginationComponent implements OnInit {\n  @Input() allItems: any[];\n  @Input() pageSize: number;\n  @Input() maxPages: number;\n  @Input() showTotal: boolean;\n  @Output() pagedItems = new EventEmitter<Array<any>>();\n  pager: any = {};\n\n  constructor(private pagination: NgPaginationService) {\n    this.showTotal = false;\n   }\n\n  ngOnInit() {\n    this.setPage(1)\n  }\n\n  setPage(page: number) {\n    // get pager object from service\n    this.pager = this.pagination.getPager(this.allItems.length, page, this.pageSize, this.maxPages);\n\n    // get current page of items\n    this.pagedItems.emit(this.allItems.slice(this.pager.startIndex, this.pager.endIndex + 1)) \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgPaginationComponent } from './ng-pagination.component';\n\n@NgModule({\n  declarations: [NgPaginationComponent],\n  imports: [\n    CommonModule,\n  ],\n  exports: [NgPaginationComponent]\n})\nexport class NgPaginationModule { }\n"]}